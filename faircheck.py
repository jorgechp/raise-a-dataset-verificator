"""
We need to launch a POST request to a FAIR maturity evaluation service and process the response.
For that reason, we need to call here the service using the request library.

If you are looking for a terminal version of this tool. Please take a look at https://github.com/rhizomik/fair-check
"""

from logging import error
from numbers import Number
from typing import List, Dict, Tuple

from requests import post, Response

# This header is required to call the service, as the service needs a json formatted body
HEADERS = {'Content-Type': 'application/json', 'Accept': 'application/json'}

# Inside the data body, we need to send the url inside the parameter "subject".
data = '{"subject": "%s"}'


def execute_test(instance_uri: str, test_url: str) -> List[Dict] or Number:
    """
    Execute a POST request to the FAIR maturity evaluation service and return the response.
    Parameters
    :param instance_uri: The uri of the resource to be evaluated
    :param test_url: The uri of the maturity indicator we want to test. For example, Gen2_FM_F1B
    :return Any if the status code is 200. Otherwise, returns the number of the status code
    """

    data_processed = data % instance_uri
    response: Response = post(test_url, headers=HEADERS, data=data_processed)

    if response.status_code == 200:
        return response.json()
    else:
        error(f"Error calling interface: {test_url}. "
              f"Status code: {response.status_code}. "
              f"Reason: {response.reason}"
              )
        return response.status_code


def process_response(response: List[Dict]) -> Tuple[str, bool] or None:
    """
    Process the response to extract the comment_value and the result generated by the FAIR maturity evaluation service.
    Parameters
    :param response: The uri of the resource to be evaluated
    :return A Tuple[comment_value, result] where result is a boolean. If response is none, Then return None
    """

    response_dict: Dict[str, Dict] = dict()
    if response is not None:
        for identifier, result in response.items():
            response_dict[identifier] = {
                "result":  result[0]['http://semanticscience.org/resource/SIO_000300'][0]['@value'] == 1.0,
                "comment": result[0]['http://schema.org/comment'][0]['@value']
                                         }
        return response_dict
    else:
        error(f"Error calling the method process_response. "
              f"Empty response "
              )
        return None
